<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://localhost:3000/" rel="alternate" type="text/html" />
<updated>2016-09-13T11:51:15-04:00</updated>
<id>http://localhost:3000/</id>
<title>Shantanu Joshi</title>
<subtitle>A blog about technology and stuff related</subtitle>
<entry>
<title>Booting Into Linux from the Grub Prompt with an NVME Drive</title>
<link href="http://localhost:3000/grub-prompt-nvme/" rel="alternate" type="text/html" title="Booting Into Linux from the Grub Prompt with an NVME Drive" />
<published>2016-09-09T00:15:00-04:00</published>
<updated>2016-09-09T00:15:00-04:00</updated>
<id>http://localhost:3000/grub-prompt-nvme</id>
<content type="html" xml:base="http://localhost:3000/grub-prompt-nvme/">&lt;p&gt;For the first time since my foray into Linux 4/5 years ago, I ran into the dreaded grub prompt at boot.&lt;/p&gt;

&lt;p&gt;It looks a lot like this:
&lt;img src=&quot;https://terminalinflection.com/wordpress/wp-content/uploads/2012/10/GRUB-Ubuntu.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This basically means that the grub install is corrupted and GRUB doesn’t know how to boot.&lt;/p&gt;

&lt;p&gt;There are quite a few tutorials on recovering from grub rescue mode, infact the image above includes most of the neccesary steps to booting into grub. But here’s my experience recovering from this prompt with an NVME Pcie SSD. In my first attempt to follow the steps below I had a kernel panic and had to start from scractch because I followed the steps to a regular recovery.&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt; Steps to Recover from the Grub Prompt &lt;/h2&gt;
&lt;p&gt;Here’s a step by step method to how I recovered from the grub prompt, fixed grub, and rebooted to write this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1: Getting Out of the Grub Prompt&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; to see which drives are mounted&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;ls (hd0,1)/&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; and repeat this until you find the drive &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;(hdX, Y)/&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; with your boot disk &lt;/li&gt;
&lt;li&gt;Once you&#39;ve found your boot disk type: &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;set root=(hdX,X)&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; where X is your drive/partition number &lt;/li&gt;
&lt;li&gt;The next part depends on your version of Linux (but if you&#39;re after version 12 you&#39;re good so keep reading)&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;linux /vmlinuz root=/dev/nvme0nXpY &lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; where X is the X from hdX which is your boot drive, and Y which is the partition number on that drive that the boot partition.&lt;/li&gt;
&lt;li&gt;initrd /initrd.img&lt;/li&gt;
&lt;li&gt;boot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 2: Booting into Linux and Repairing GRUB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After beginnning the boot process from the prompt I noticed a flickering TTY screen at boot due probably to my Nvidia drivers or some other permissions error. I knew to basically type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;Ctrl + F1&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; until I got get a TTY screen (which would disappear within 3 seconds due to the nature of this flickering bug, and could be brought back by pressing &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;Ctrl + F1&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;So while fighting with the flickering TTY screen I had to enter my username, password, and the command &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo service GDM stop&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;. This command may be: &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo service lightdm stop&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; if you have a different display manager.&lt;/p&gt;

&lt;p&gt;Basically my display manager was in a corrupted loop because the .Xauthority file’s permissions are altered either during the grub prompt boot. The permissions change to root effectively. As a result upon stopping the display manager I am able to access the TTY and preform the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Type the command &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;update-grub&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; in the tty &lt;/li&gt;
&lt;li&gt; You should see a series of images to add to the grub menu, next enter &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;grub-install /dev/nvme0nXpY&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; as per your prior boot drive and partition&lt;/li&gt;
&lt;li&gt; Now to check .Xauthority permissions, type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo ls -lah&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; in your home directory to see what the permissions settings are for .Xauthority file. In my case this was &quot;root:root&quot;&lt;/li&gt;
&lt;li&gt; To repair .Xauthority type the following replacing username with your username &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;chown username:username .Xauthority&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; in my case I typed shantanu:shantanu &lt;/li&gt;
&lt;li&gt; Type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo reboot&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; and hope for the best &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After this I waited for the grub screen and indeed it worked. The NVME0nXpY thing was neccesary for me to boot and subsequently type this post.&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="linux" />
<summary>For the first time since my foray into Linux 4/5 years ago, I ran into the dreaded grub prompt at boot.</summary>
</entry>
<entry>
<title>Getting Pascal GPU’s to Work on Linux</title>
<link href="http://localhost:3000/nvidiabuntu/" rel="alternate" type="text/html" title="Getting Pascal GPU&#39;s to Work on Linux" />
<published>2016-09-04T21:08:00-04:00</published>
<updated>2016-09-04T21:08:00-04:00</updated>
<id>http://localhost:3000/nvidiabuntu</id>
<content type="html" xml:base="http://localhost:3000/nvidiabuntu/">&lt;p&gt;I’ve been running ubuntu on computers with discrete GPU’s for a few years now. Not ONCE has it ever been easy. The problem is that the Ubuntu default Nouveau drivers require time to update compatibility, and Nvidia drivers hate working with/disabling Nouveau. Given my itch to have the latest and greatest laptop hardware for the past few years I’ve had to deal with hacking away at the kernel/nouveau and nvidia beta drivers to get linux running on my various devices. Compatibility is generally introduced in kernel updates a couple months after the release of new hardware, but ain’t nobody got time for that.&lt;/p&gt;

&lt;p&gt;Around a month or so ago, after a friend at facebook gifted me an Oculus Rift; as a result I decided to build my own computer. I bought the new Nvidia GTX 1080 and a month later also purchased the new Pascal Titan X (or Titan XP, thanks linustechtips) and decided to dual boot Ubuntu 16.04 because I thought it’d be interesting to test CUDA benchmarks with the new GPU’s. I also failed to find anyone post anything about their success or even failure with trying to run the GPU’s on linux.&lt;/p&gt;

&lt;p&gt;After hours of failure getting the beta linux drivers from BOTH the PPA and the official Nvidia website link to work with my install I finally found a method that I think works 100% of the time when getting Ubuntu to work with dGPUs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt; How to get new GPU&#39;s working with Ubuntu &lt;/h2&gt;
&lt;p&gt;Note: the following steps expect a fresh Ubuntu install. If you’re trying to trouble shoot after installing, getting this to work would require at least being able to boot to TTY which may not be garunteed for certain installs. The basic framework is as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Install Ubuntu: to boot into the installer edit the boot parameters and add nomodeset before quiet splash&lt;/li&gt;
&lt;li&gt; Boot into Ubuntu with nomodeset, run ALL updates and connect to the internet&lt;/li&gt;
&lt;li&gt; (Optional) Restart the system, add nomodeset again, download the latest kernel and upgrade the kernel&lt;/li&gt;
&lt;li&gt; Restart the computer, same setup with nomodeset, add the graphics PPA, then logout &lt;/li&gt;
&lt;li&gt; Switch to TTY, login and stop the desktop envrionment service (gdm or lightdm depending on your OS)&lt;/li&gt;
&lt;li&gt; Purge the nouveau driver&lt;/li&gt;
&lt;li&gt; Install latest nvidia driver &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;nvidia-###&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt; Reboot to your OS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the basics steps detailed tutorial below.&lt;/p&gt;

&lt;h2&gt;0. Installing Ubuntu&lt;/h2&gt;
&lt;p&gt;The steps to installing ubuntu vary based off of your needs. In my case I generally skip the preset options for installation and click “something else” where I can add my own partition scheme. I prefer to create a partition for &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;/home&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; generally alloting 30-50 gigs for / and the rest for /home on the drive. My tutorial assumes you’ve got a live disk of your chosen distro (personall running Gnome 16.04 because the UI is fantastic).&lt;/p&gt;

&lt;h2&gt;1. Booting into the Live Disk&lt;/h2&gt;
&lt;p&gt;In order to boot into the live disk for the install you need to highlight the “Intall Ubuntu” option at the live disk grub menu and type &lt;kbd&gt;e&lt;/kbd&gt; to edit the commands and add &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;nomodeset&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; right after “quiet splash”, I also recommend changing quiet splash to &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;noquiet nosplash&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; but that’s optional&lt;/p&gt;

&lt;div class=&quot;side-by-side&quot;&gt;
	&lt;div class=&quot;toleft&quot;&gt;
		&lt;p&gt;&lt;img class=&quot;image&quot; src=&quot;http://www.tecmint.com/wp-content/uploads/2016/04/Ubuntu-16.04-Boot-Screen.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;
	&lt;/div&gt;
	&lt;div class=&quot;toright&quot;&gt;
	&lt;img class=&quot;image&quot; src=&quot;https://www.maketecheasier.com/assets/uploads/2009/12/ubuntukarmic-edit-grub-entr.png&quot; alt=&quot;Alt Text&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;2. Boot into Ubuntu&lt;/h2&gt;
&lt;p&gt;After the install you should see the regular grub menu, once the grub menu appears type “e” again to edit the boot commands and type nomodeset as in step 1. Nomodeset is neccesary at boot because it disables certain video drivers which may fail with newer GPU’s.&lt;/p&gt;

&lt;p&gt;Once logged in, connect to the internet and open up a terminal window and run: &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get upgrade&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get dist-upgrade&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;. Some people tend to add &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; but I don’t really mind so I do them one at a time in case there are errors.&lt;/p&gt;

&lt;p&gt;Lastly reboot the system and use nomodeset to login again. At this point you’re an expert at adding nomodeset to the boot commands so just assume anytime there is a reboot (unless otherwise stated) just add nomodeset to boot.&lt;/p&gt;

&lt;h2&gt;2.a (Optional) Kernel Update&lt;/h2&gt;
&lt;p&gt;I like to run the latest RC kernel because there’s generally better compatibility with new hardware but it’s not neccesarily 100% stable. More like 98% stable in my experience. Given the new hardware I atleast recommend preforming a kernel update to the latest kernel (non RC) to be safe but it’s optional.&lt;/p&gt;

&lt;p&gt;Click &lt;a href=&quot;http://kernel.ubuntu.com/~kernel-ppa/mainline/&quot;&gt;here&lt;/a&gt; to see the latest kernel builds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From the link above find the folder for the latest kernel (in my case at the time of writing this is 4.8-rc6 but 4.7 is the latest final release)&lt;/li&gt;
&lt;li&gt; Depending on your distribution download 3 deb files for your distro. In my case I am running generic linux (default) and need the following deb files: &lt;pre&gt;linux-headers-4.8.0-040800rc6_4.8.0-040800rc6.201609121119_all.deb
linux-headers-4.8.0-040800rc6-generic_4.8.0-040800rc6.201609121119_amd64.deb
linux-image-4.8.0-040800rc6-generic_4.8.0-040800rc6.201609121119_amd64.deb&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt; Move the files to an empty folder, open terminal and cd to that folder&lt;/li&gt;
&lt;li&gt; In order to install the kernels type: &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo dpkg -i *.deb&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; which will install each of the deb files you downloaded&lt;/li&gt;
&lt;li&gt; After completing the install restart the computer and login&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt; 3.Add the Graphics PPA &lt;/h2&gt;
&lt;p&gt;Open terminal and type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo add-apt-repository ppa:graphics-drivers/ppa&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; then run &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt; 4. Logout and Remove Nouveau&lt;/h2&gt;
&lt;p&gt;Some people say removing nouveau isn’t neccesary, but in my experience it causes more problems when disabled and tends to restart itself during updates. As a result I recommend removing nouveau. In order to remove nouveau, disbale the desktop environment, and install the graphics drivers do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Logout of your account and at the login screen type &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;F1&lt;/kbd&gt; to switch to &quot;tty1&quot;&lt;/li&gt;
&lt;li&gt; Type your username and password into the console to login to your account&lt;/li&gt;
&lt;li&gt; Depedning on your desktop environment, type either &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo service gdm stop&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo service lightdm stop&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; to disable the desktop envrionment&lt;/li&gt;
&lt;li&gt;Next remove nouveau with by typing: &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get --purge remove xserver-xorg-video-nouveau&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt; Now that nouveau is removed, we can go ahead and install the latest nvidia driver by typing &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get intall nvidia-&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; and pressing &lt;kbd&gt;TAB&lt;/kbd&gt; to see the drivers available&lt;/li&gt;
&lt;li&gt; In my case the latest driver (highest number after nvidia-) was &quot;nvidia-370&quot; so I installed the driver by typing &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo apt-get intall nvidia-370&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt; 5. Reboot the OS and Test&lt;/h2&gt;
&lt;p&gt;The final step is to type &lt;strong&gt;&lt;code&gt;&lt;span class=&quot;evidence&quot;&gt;sudo reboot-&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt; to restart the computer. This time you &lt;strong&gt;&lt;em&gt; do not&lt;/em&gt;&lt;/strong&gt; need to type nomodeset at the grub menu. If all goes well you should be able to boot into the OS without any problems.&lt;/p&gt;

&lt;p&gt;So far I have been able to successfully run the latest nvidia GPUs on the following systems multiple times with these steps:&lt;/p&gt;

&lt;p&gt;Desktops:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Motherboard&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Proccessor&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;GPU&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Asus Maximus VIII Gene&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i7 6700k&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Titan XP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Asus Z170 Pro Gaming&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i7 6700&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GTX 1080 and 1070&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Gigabyte Z170 Wifi&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;i5 6600k&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GTX 1070&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Laptops:
Dell XPS 15 9550, Surface Book w. DGPU (both of these needed additional tweaks to install and run a dual boot but the graphics card install was identical)&lt;/p&gt;

&lt;p&gt;If the install fails I recommend the following trouble-shooting steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you get the login screen but can&#39;t get the desktop, swithc to TTY and check the permissions of the .Xauthority file in your home folder&lt;/li&gt;
&lt;li&gt;If you&#39;re getting a flickering screen and no login screen, switch to TTY and try to stop the display manager and repair the install there&lt;/li&gt; 
&lt;/ul&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="linux" />
<summary>I’ve been running ubuntu on computers with discrete GPU’s for a few years now. Not ONCE has it ever been easy. The problem is that the Ubuntu default Nouveau drivers require time to update compatibility, and Nvidia drivers hate working with/disabling Nouveau. Given my itch to have the latest and greatest laptop hardware for the past few years I’ve had to deal with hacking away at the kernel/nouveau and nvidia beta drivers to get linux running on my various devices. Compatibility is generally introduced in kernel updates a couple months after the release of new hardware, but ain’t nobody got time for that.</summary>
</entry>
<entry>
<title>Modding an AIO Water Cooler for the Titan XP (Pascal)</title>
<link href="http://localhost:3000/titanxp-watercooling/" rel="alternate" type="text/html" title="Modding an AIO Water Cooler for the Titan XP (Pascal)" />
<published>2016-09-02T18:21:00-04:00</published>
<updated>2016-09-02T18:21:00-04:00</updated>
<id>http://localhost:3000/titanxp-watercooling</id>
<content type="html" xml:base="http://localhost:3000/titanxp-watercooling/">&lt;p&gt;I recently got my hands on a new Pascal Titan X, and while the performance of the card is phenomenal it has terrible idle and load temps. In this post I’ll describe my steps in modding a hybrid water cooling kit that’s fit for the GTX 1080 to work with the new Titan X. &lt;em&gt;Scroll down to skip to the tutorial&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/1.JPG”
            title=”Titan XP”
            caption=”Titan XP” %}&lt;/p&gt;

&lt;h2&gt; Why water cool? &lt;/h2&gt;

&lt;p&gt;Nvidia’s default blower-style coolers are relatively inefficient, and unfortunately AIB’s (Add-in Board Partners) are not allowed to release custom cooling solutions or modify the reference PCB Nvidia creates for the Titan series.&lt;/p&gt;

&lt;p&gt;As a result the only solution to better performance and temperatures is water cooling. There is a large community of PC enthusiasts that build custom water cooling loops for their systems. Unfortunately custom loops are expensive and cumbersome. In addition they tend to make upgrading quite difficult. The next solution to water cooling a graphics card is a “hybrid-kit”. Basically an all in one water cooler that attaches to the GPU PCB and creates a water cooling loop.&lt;/p&gt;

&lt;p&gt;EVGA (an AIB that releases custom loops) does not have a water cooling kit for the new Titan X. The only option is to modify a water cooling kit made for the Titan X’s younger brother the GTX 1080.&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/2.JPG”
            title=”EVGA Hybrid”
            caption=”EVGA 1080 Hybrid Kit” %}&lt;/p&gt;

&lt;h2&gt; How to Mod the EVGA 1080 Hybrid Kit for the Titan X &lt;/h2&gt;

&lt;p&gt;Installing the kit with or without mods first requires complete removal of the original cooler from the graphics card.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Warning: this will void your warranty with nvidia, but if you put the original cooler back on there’s no way for them to know you’ve removed it. I’m not saying I recommend doing so but I’m also saying there are no tamper-proof screws…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note before continuing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep careful track of all the screws, you&#39;ll need them in the future &lt;/li&gt;
&lt;li&gt;Try to find a dremel tool, if you don&#39;t have one it&#39;s a perfect opportunity to pick one up, I&#39;ll specify the attachment bits used in each step&lt;/li&gt;
&lt;li&gt;If you&#39;re afraid or unsure of removing the GPU cooler from the PCB I recommend watching this &lt;a href=&quot;https://www.youtube.com/watch?v=H7HN3CDxMQk&quot;&gt;video&lt;/a&gt; detailing the teardown of the Titan X&lt;/li&gt;
&lt;li&gt;You must ground yourself somehow while doing this. Click &lt;a href=&quot;https://www.tomshardware.com/faq/id-2121341/ground-building-computer.html&quot;&gt;here&lt;/a&gt; to learn why it&#39;s necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Step 1: Remove the IO Plate&lt;/h2&gt;

&lt;p&gt;Start by removing the 5 screws on the IO plate, the two screws for the DVI port, and the two screws on the back plate holding the IO plate in place.&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/3.JPG”
            title=”Titan X IO Plate”
            caption=”Remove this IO Plate” %}&lt;/p&gt;

&lt;h2&gt;Step 2: Unscrew the Cooler&lt;/h2&gt;

&lt;p&gt;Get yourself two allan/hex keys/bit, a tiny phillips 00, and a larger philips head. I didn’t take pictures of the cooler removal given that there’s no real trick here. Here’s the best order of operations for the removal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Remove the back plate by carefully unscrewing the TINY screws holding it in place (one part of the backplate slides out of the other)&lt;/li&gt;
&lt;li&gt;Use the smaller allan key to remove all the screws surrounding the cooler, the four larger screws next to the clear window are only there to hold the window to the plate itself (see photo of larger screws)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/4.JPG”
            title=”Titan X Cooler Screws”
            caption=”Remove all but the optional circled screws” %}&lt;/p&gt;

&lt;p&gt;Step 3: Remove the Cooler&lt;/p&gt;

&lt;p&gt;Again I didn’t think this step needed documentation. The best way to do it is remove the section with the window first, you will experience some resistance from the thermal compound on the heatsink but ignore it. Next remove the second cooler, be careful of the wire connecting the fan to the PCB and remove it carefully. Once the entire cooler is removed and you’ve wiped the GPU surface with a microfiber cloth dipped in some alcohol…&lt;/p&gt;

&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/5.JPG”
            title=”Titan X PCB”
            caption=”Nvidia GP102” %}&lt;/p&gt;

&lt;h2&gt;Step 4: Modifications to the EVGA Kit&lt;/h2&gt;

&lt;p&gt;The evga kit consists of 3 major parts: the AIO water cooler, a pcb plate, and a top cover. The AIO cooler fits onto the GPU perfectly as both the Titan X and the 1080 use the GP102 chip, the only issue is mounting the PCB plate with the fan onto the Titan X PCB. The plate needs to accommodate for the following features of the Titan X:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Extra Capacitors&lt;/li&gt;
&lt;li&gt; S6-pin power connector &lt;/li&gt;
&lt;li&gt; Additional Phase Chip &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/6.JPG”
            title=”Additional PCB Items”
            caption=”Additional Titan X Components” %}&lt;/p&gt;

&lt;h2&gt;Step 5: Make Room for an Extra 6-Pin&lt;/h2&gt;

&lt;p&gt;I started with this as it seemed the simplest, I used a cutting tool and eyeballed the additional cuts needed for the plate. The removed section is highlighted below:&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/7.JPG”
            title=”Space for 8+6Pin”
            caption=”Area Removed for 6-Pin” %}&lt;/p&gt;

&lt;h2&gt;Step 6: Accomodating the Extra Phase Chip&lt;/h2&gt;

&lt;p&gt;Cut out a section for the extra phase chip. This part is tricky, I started by using a cutting tool to cut out a square a bit smaller than the area I thought I needed (all eyeballed). After which I brought the plate close to the PCB to see how much more metal I would have to remove and used a grinding bit to cut away slowly at the plate.&lt;/p&gt;

&lt;p&gt;Here are my results:&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/8.JPG”
            title=”Cuts for Phase Chip”
            caption=”Area Removed for Extra Chip” %}&lt;/p&gt;

&lt;p&gt;{% include image.html
        	img=”assets/images/TitanXPMod/9.JPG”
            title=”Larger View of Cuts”
            caption=”Wider View of the Cut for Scale” %}&lt;/p&gt;

&lt;h2&gt;Step 7: Grinding a Space for the Capacitors&lt;/h2&gt;
&lt;p&gt;(Still in progress, the rest of the tutorial will be updated later today)&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="hardware" />
<summary>I recently got my hands on a new Pascal Titan X, and while the performance of the card is phenomenal it has terrible idle and load temps. In this post I’ll describe my steps in modding a hybrid water cooling kit that’s fit for the GTX 1080 to work with the new Titan X. Scroll down to skip to the tutorial</summary>
</entry>
<entry>
<title>Benchmarking the Sieve of Eratosthenes</title>
<link href="http://localhost:3000/soe/" rel="alternate" type="text/html" title="Benchmarking the Sieve of Eratosthenes" />
<published>2016-08-19T05:21:00-04:00</published>
<updated>2016-08-19T05:21:00-04:00</updated>
<id>http://localhost:3000/soe</id>
<content type="html" xml:base="http://localhost:3000/soe/">&lt;p&gt;Advanced concepts in computer science can sometimes be difficult to understand and difficult to execute. A great example of this is tail recurison in functional programming. The conept is easy to explain, and the notion of it running in constant stack space is easy to accept. However building programs and algorithms to be tail recursive can be a difficult task that isn’t very easy to teach. In a similar fashion explaining Floydd Warshall’s, in my opinion, is much harder than writing the simple program that implements it.&lt;/p&gt;

&lt;p&gt;Learning the Sieve or Eratosthenes, an anchient and intuitive algorithm that generates prime numbers, reminded me of my first time learning about summing up numbers with for-loops in an intro Java class in high school. I felt this extreme sense of confidence and comfort with programming that began fading away after my first college lab assignment in C. The &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt; just clicks in a way not many &lt;em&gt;“advanced”&lt;/em&gt; concepts do in CS. (Yes I’m abbreviating Sieve of Eratosthenes to save 21 characters you’re welcome).&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt;Naive Algorithm to Test for Primes&lt;/h2&gt;
&lt;p&gt;Testing for a prime number is tricky; here’s a simple slow method to start with:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;Given the number x if any prime integer from 2 to sqaureroot(X) evenly divides n it&#39;s NOT prime.&lt;/strong&gt;&lt;/pre&gt;

&lt;p&gt;This is reallllly slow. If your number is massive this method gets even worse. Regardless it’s probably a great intro to programming homework problem (hint hint CS101 profs) but in the business of primes we’d need something faster. Enter &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;…&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt;The Sieve&lt;/h2&gt;

&lt;p&gt;The Sieve of Eratosthenes was developed by a Greek mathematicions somewhere around 240ish BC.&lt;/p&gt;

&lt;p&gt;I was actually taught the sieve in a course preparing students for programming competitions where we were learning methods of Prime number generation. My love for prime numbers is non-existent, but for some odd reason I found this singular algorithm infuriatingly beautiful. Sure, it doesn’t have the overwhelming existential impacts of max flows and single shortest paths but something about the simple and intuitive nature of the &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;  differentiated it from the likes of every other algorithm in this class. I found myself revisiting the algorithm two weeks later in a parallel computing course attempting to translate my java to c code and running it through OpenMP for a lab.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading2&quot;&gt;The Acutal Algorithm&lt;/h2&gt;

&lt;p&gt;The goal is to create a list of prime numbers that we can reference at constant time, ideally we can generate this list more quickly than the naïve approach&lt;/p&gt;

&lt;p&gt;Here’s the algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate a list of integers from 2 to some limit (for our purposes let&#39;s use 21)&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21&lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;Since the first number of this list is 2, cross out every &lt;em&gt;2nd&lt;/em&gt; number on the list after 2&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 &lt;del&gt;4&lt;/del&gt; 5 &lt;del&gt;6&lt;/del&gt; 7 &lt;del&gt;8&lt;/del&gt; 9 &lt;del&gt;10&lt;/del&gt; 11 &lt;del&gt;12&lt;/del&gt; 13 &lt;del&gt;14&lt;/del&gt; 15 &lt;del&gt;16&lt;/del&gt; 17 &lt;del&gt;18&lt;/del&gt; 19 &lt;del&gt;20&lt;/del&gt; 21 &lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;The next number is 3 so same idea, cross out ever &lt;em&gt;3rd&lt;/em&gt; number on the list after 3&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 &lt;del&gt;4&lt;/del&gt; 5 &lt;del&gt;6&lt;/del&gt; 7 &lt;del&gt;8&lt;/del&gt; &lt;del&gt;9&lt;/del&gt; &lt;del&gt;10&lt;/del&gt; 11 &lt;del&gt;12&lt;/del&gt; 13 &lt;del&gt;14&lt;/del&gt; &lt;del&gt;15&lt;/del&gt; &lt;del&gt;16&lt;/del&gt; 17 &lt;del&gt;18&lt;/del&gt; 19 &lt;del&gt;20&lt;/del&gt; &lt;del&gt;21&lt;/del&gt;&lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;5 is the next number, however no multiples of 5 remain to be crossed out&lt;/li&gt;
&lt;li&gt;We continue until there are no more numbers left to count off of and there&#39;s your list of primes (which is right now) and what we are left with is our list of primes&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 5 7 11 13 17 19&lt;/strong&gt;&lt;/pre&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading2&quot;&gt; Simple right?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#EB298C&quot;&gt;YES!&lt;/span&gt;&lt;/strong&gt; I think that’s the beauty of it. I’d like to take this simple concept and see how far I can attempt to speed it up and benchmark it.&lt;/p&gt;

&lt;p&gt;Watch this GIF that illustrates the algorithm perfectly (thanks Wikipedia) reload the page if it’s finished.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sieve of Eratosthenes animation&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0b/Sieve_of_Eratosthenes_animation.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that’s the &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;. There are faster variations (see Euler’s Sieve and this &lt;a href=&quot;https://www.cs.utexas.edu/users/misra/scannedPdf.dir/linearSieve.pdf&quot;&gt;paper&lt;/a&gt;). &lt;em&gt;But this algorithm is relatively easy to explain and understand.&lt;/em&gt;&lt;/p&gt;

&lt;!---
&lt;hr/&gt;
&lt;h2 id=&quot;heading2&quot;&gt; Here&#39;s the sieve in Java: &lt;/h2&gt;



&lt;h2 id=&quot;heading2&quot;&gt;Here&#39;s the implementation in C: &lt;/h2&gt; 

 

Parallelization? Is this a word? Making to parallels codes: 

This is not a guide to parallelizing code, If you&#39;re interested in learning I can point you to my amazing college professor for the course I took; his course material is all in comic sans on a jarring neon background, but his lectures were fantastic.
 

&lt;h2 id=&quot;heading2&quot;&gt;This is probably not a great CUDA task:&lt;/h2&gt; 

-Running the sieve with OpenMP or MPI makes a lot of sense, I do think that achieving a speedup from GPU parallelizations might be difficult given memory restrictions in cuda but I decided to investigate.

-Runnign the sieve on CUDA probably doesn&#39;t make direct sense given the speedup that induced by GPU parallelization. But I have a brand new Water Cooled Psacal Titan X from Nvidia and it would be a crime to leave all those CUDA cores to rendering GTA V at 4K Resolution and training baby predictive models for my fantasy football league… So I&#39;m going to try to find a way to utilize the GPU cuda cores to generate primes.
--&gt;

</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="cs" />
<summary>Advanced concepts in computer science can sometimes be difficult to understand and difficult to execute. A great example of this is tail recurison in functional programming. The conept is easy to explain, and the notion of it running in constant stack space is easy to accept. However building programs and algorithms to be tail recursive can be a difficult task that isn’t very easy to teach. In a similar fashion explaining Floydd Warshall’s, in my opinion, is much harder than writing the simple program that implements it.</summary>
</entry>
<entry>
<title>Compresssing Images in Python</title>
<link href="http://localhost:3000/python-image-compression/" rel="alternate" type="text/html" title="Compresssing Images in Python" />
<published>2016-07-31T15:08:00-04:00</published>
<updated>2016-07-31T15:08:00-04:00</updated>
<id>http://localhost:3000/python-image-compression</id>
<content type="html" xml:base="http://localhost:3000/python-image-compression/">&lt;p&gt;While working on website performance tuning for some part time work I needed to find a way to compress 100,000+ images for an ecommerce website’s catalog. The current solution to image compression was a “designer” who would bulk process images in photoshop with a macro. He had worked for 4 days straight and estimated a 2 week completion time for processing all the pictures.&lt;/p&gt;

&lt;p&gt;The images were simply too large in file size and the wrong dimensions. Each image had to be both scaled to fit within fixed square pixel dimensions and reduced in file size.&lt;/p&gt;

&lt;p&gt;I wrote a pythons script (attached below) to compress the files for this specific task. But I thought I’d rewrite it to work for compressing images for this blog given that having a post with 15 10mb images would not be great for load times.&lt;/p&gt;

&lt;p&gt;Here’s my version of the image compression script built for compressing images in a given directory to a managebale size using Pil (or Pillow) a python library that does most of the work here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; If you’re looking for something that can also change image dimensions see &lt;a href=&quot;https://gist.github.com/ShantanuJoshi/44e9b72a985d5d6b4e8df2810ce5d25e&quot;&gt;here&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt;CompressMe.py&lt;/h2&gt;
&lt;script src=&quot;https://gist.github.com/ShantanuJoshi/23ac55479ab9a613230bd9467d080f33.js&quot;&gt;&lt;/script&gt;

</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="cs" />
<summary>While working on website performance tuning for some part time work I needed to find a way to compress 100,000+ images for an ecommerce website’s catalog. The current solution to image compression was a “designer” who would bulk process images in photoshop with a macro. He had worked for 4 days straight and estimated a 2 week completion time for processing all the pictures.</summary>
</entry>
<entry>
<title>Doge</title>
<link href="http://localhost:3000/doge/" rel="alternate" type="text/html" title="Doge" />
<published>2016-01-23T22:10:00-05:00</published>
<updated>2016-01-23T22:10:00-05:00</updated>
<id>http://localhost:3000/doge</id>
<content type="html" xml:base="http://localhost:3000/doge/">&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sx44AEd.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="doge" />
<summary></summary>
</entry>
<entry>
<title>First Post Readme</title>
<link href="http://localhost:3000/first-post-readme/" rel="alternate" type="text/html" title="First Post Readme" />
<published>2016-01-01T00:00:00-05:00</published>
<updated>2016-01-01T00:00:00-05:00</updated>
<id>http://localhost:3000/first-post-readme</id>
<content type="html" xml:base="http://localhost:3000/first-post-readme/">&lt;p&gt;This is my blog, website, braindump.&lt;/p&gt;

&lt;p&gt;I post projects here. And stuff I’ve built. And stuff I want to share with people because I still can’t figure out twitter &lt;img class=&quot;emoji&quot; title=&quot;:unamused:&quot; alt=&quot;:unamused:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f612.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="hello world is overrated" />
<summary>This is my blog, website, braindump.</summary>
</entry>
</feed>
