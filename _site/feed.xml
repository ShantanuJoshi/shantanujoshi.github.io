<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://localhost:3000/" rel="alternate" type="text/html" />
<updated>2016-09-04T20:54:00-04:00</updated>
<id>http://localhost:3000/</id>
<title>Shantanu Joshi</title>
<subtitle>A blog about technology and stuff related</subtitle>
<entry>
<title>Benchmarking the Sieve of Eratosthenes</title>
<link href="http://localhost:3000/soe/" rel="alternate" type="text/html" title="Benchmarking the Sieve of Eratosthenes" />
<published>2016-09-04T05:21:00-04:00</published>
<updated>2016-09-04T05:21:00-04:00</updated>
<id>http://localhost:3000/soe</id>
<content type="html" xml:base="http://localhost:3000/soe/">&lt;p&gt;The Sieve of Eratosthenes is a peculiar, ancient, and intuitive algorithm that generates prime numbers. This post is about my weird obsession with a dumb, probably inefficient algorithm, and my attempt to parallelize it and actually put to use graphics cards I normally just play Grand Theft Auto 5 on.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;heading2&quot;&gt;Prime Numbers&lt;/h2&gt;

&lt;p&gt;Prime numbers are interesting and tons of smart people are doing really compelling research on them. &lt;em&gt;This is definitely not that.&lt;/em&gt; So here’s an elementary explanation of primes  and the &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt; (yes I’m abbreviating Sieve of Eratosthenes to save 21 characters you’re welcome).&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt;Naive Algorithm&lt;/h2&gt;
&lt;p&gt;Testing for a prime number is tricky; here’s a simple slow method to start with:&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;Given the number x if any prime integer from 2 to sqaureroot(X) evenly divides n it&#39;s NOT prime.&lt;/strong&gt;&lt;/pre&gt;

&lt;p&gt;This is reallllly slow. If your number is massive this method gets even worse. Regardless it’s probably a great intro to programming homework problem (hint hint CS101 profs) but in the business of primes we’d need something faster. Enter &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;…&lt;/p&gt;

&lt;h2 id=&quot;heading2&quot;&gt;The Sieve&lt;/h2&gt;

&lt;p&gt;I was actually taught the sieve in a course preparing students for programming competitions where we were learning methods of Prime number generation. My love for prime numbers is non-existent, but for some odd reason I found this singular algorithm infuriatingly beautiful. Sure, it doesn’t have the overwhelming existential impacts of max flows and single shortest paths but something about the simple and intuitive nature of the &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;  differentiated it from the likes of every other algorithm in this class. I found myself revisiting the algorithm two weeks later in a parallel computing course attempting to translate my java to c code and running it through OpenMP for a lab.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading3&quot;&gt;The Acutal Algorithm&lt;/h2&gt;

&lt;p&gt;The goal is to create a list of prime numbers that we can reference at constant time, ideally we can generate this list more quickly than the naïve approach&lt;/p&gt;

&lt;p&gt;Here’s the algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate a list of integers from 2 to some limit (for our purposes let&#39;s use 21)&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21&lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;Since the first number of this list is 2, cross out every &lt;em&gt;2nd&lt;/em&gt; number on the list after 2&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 &lt;del&gt;4&lt;/del&gt; 5 &lt;del&gt;6&lt;/del&gt; 7 &lt;del&gt;8&lt;/del&gt; 9 &lt;del&gt;10&lt;/del&gt; 11 &lt;del&gt;12&lt;/del&gt; 13 &lt;del&gt;14&lt;/del&gt; 15 &lt;del&gt;16&lt;/del&gt; 17 &lt;del&gt;18&lt;/del&gt; 19 &lt;del&gt;20&lt;/del&gt; 21 &lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;The next number is 3 so same idea, cross out ever &lt;em&gt;3rd&lt;/em&gt; number on the list after 3&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 &lt;del&gt;4&lt;/del&gt; 5 &lt;del&gt;6&lt;/del&gt; 7 &lt;del&gt;8&lt;/del&gt; &lt;del&gt;9&lt;/del&gt; &lt;del&gt;10&lt;/del&gt; 11 &lt;del&gt;12&lt;/del&gt; 13 &lt;del&gt;14&lt;/del&gt; &lt;del&gt;15&lt;/del&gt; &lt;del&gt;16&lt;/del&gt; 17 &lt;del&gt;18&lt;/del&gt; 19 &lt;del&gt;20&lt;/del&gt; &lt;del&gt;21&lt;/del&gt;&lt;/strong&gt;&lt;/pre&gt;
&lt;li&gt;5 is the next number, however no multiples of 5 remain to be crossed out&lt;/li&gt;
&lt;li&gt;We continue until there are no more numbers left to count off of and there&#39;s your list of primes (which is right now) and what we are left with is our list of primes&lt;/li&gt;
&lt;pre&gt;&lt;strong&gt;2 3 5 7 11 13 17 19&lt;/strong&gt;&lt;/pre&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;heading3&quot;&gt; Simple right?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color:#EB298C&quot;&gt;YES!&lt;/span&gt;&lt;/strong&gt; I think that’s the beauty of it. I’d like to take this simple concept and see how far I can attempt to speed it up and benchmark it.&lt;/p&gt;

&lt;p&gt;Watch this GIF that illustrates the algorithm perfectly (thanks Wikipedia) reload the page if it’s finished (gonna add click to play later)&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Sieve of Eratosthenes animation&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0b/Sieve_of_Eratosthenes_animation.svg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that’s the &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt;. Okay so it’s definitely not the fastest way to generate primes probably not the most efficient way to write an isPrime method either. &lt;em&gt;But it’s SO easy to explain and understand.&lt;/em&gt; Learning this method reminded me of my first time learning about summing up numbers with for-loops in an intro Java class in high school where I felt this sense of achievement, confidence, and comfort with programming that was completely lost after my first college lab assignment in C. The &lt;span style=&quot;color:#1abc9c&quot;&gt;SOE&lt;/span&gt; just clicks in a way not many &lt;em&gt;“advanced”&lt;/em&gt; concepts do in CS.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;heading3&quot;&gt; Stuff below is all draft still so don&#39;t read it &lt;/h2&gt;
&lt;p&gt;Here’s the sieve in Java:&lt;/p&gt;

&lt;p&gt;Here’s the implementation in C:&lt;/p&gt;

&lt;p&gt;Parallelization? Is this a word? Making to parallels codes:&lt;/p&gt;

&lt;p&gt;Parallel computing is a sexy buzzword and this is not a guide on how to parallelize things. If you’re interested in learning I can point you to my amazing college professor for the course I took; his course material is all in comic sans on a jarring neon background, but his lectures were fantastic. (MAYBE ADD THE NAME)&lt;/p&gt;

&lt;p&gt;This is probably not a great CUDA task:&lt;/p&gt;

&lt;p&gt;-Running the sieve with OpenMP or MPI makes a LOT of sense. But unfortunately upon my graduation I lost my NYU-server privellages and no longer have access to multicore, distributed computing resources yayyyyy. Being an Alumni sucks they just don’t love you anymore.&lt;/p&gt;

&lt;p&gt;-Runnign the sieve on CUDA probably DOESN’T make sense. BUT I have a brand new Psacal Titan X from Nvidia and it would be a crime to leave all those CUDA cores to rendering GTA V at 4K Resolution and training baby predictive models for my fantasy football league… SO I’m going to try to find a way to break apart the algorithm and utilize CUDA to see if it speeds things up.&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="cs projects" />
<summary>The Sieve of Eratosthenes is a peculiar, ancient, and intuitive algorithm that generates prime numbers. This post is about my weird obsession with a dumb, probably inefficient algorithm, and my attempt to parallelize it and actually put to use graphics cards I normally just play Grand Theft Auto 5 on.</summary>
</entry>
<entry>
<title>First Post Readme</title>
<link href="http://localhost:3000/first-post-readme/" rel="alternate" type="text/html" title="First Post Readme" />
<published>2016-07-30T18:33:00-04:00</published>
<updated>2016-07-30T18:33:00-04:00</updated>
<id>http://localhost:3000/first-post-readme</id>
<content type="html" xml:base="http://localhost:3000/first-post-readme/">&lt;p&gt;This is my blog, website, braindump.&lt;/p&gt;

&lt;p&gt;I post projects here. And stuff I’ve built. And stuff I want to share with people because I still can’t figure out twitter &lt;img class=&quot;emoji&quot; title=&quot;:unamused:&quot; alt=&quot;:unamused:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f612.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="hello world is overrated" />
<summary>This is my blog, website, braindump.</summary>
</entry>
<entry>
<title>Doge</title>
<link href="http://localhost:3000/doge/" rel="alternate" type="text/html" title="Doge" />
<published>2016-01-23T22:10:00-05:00</published>
<updated>2016-01-23T22:10:00-05:00</updated>
<id>http://localhost:3000/doge</id>
<content type="html" xml:base="http://localhost:3000/doge/">&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/sx44AEd.jpg&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
</content>
<author>
<name>shantanujoshi</name>
</author>
<category term="doge" />
<summary></summary>
</entry>
</feed>
