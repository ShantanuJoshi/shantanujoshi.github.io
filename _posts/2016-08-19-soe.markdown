---
title: "Benchmarking the Sieve of Eratosthenes"
layout: post
date: 2016-08-19 05:21
tag: cs
image: 
headerImage: true
projects: true
hidden: false # don't count this post in blog pagination
description: "Sieve or Eratosthenes"
jemoji: 
author: shantanujoshi
externalLink: false
---

Advanced concepts in computer science can sometimes be difficult to understand and difficult to execute. A great example of this is tail recurison in functional programming. The conept is easy to explain, and the notion of it running in constant stack space is easy to accept. However building programs and algorithms to be tail recursive can be a difficult task that isn't very easy to teach. In a similar fashion explaining Floydd Warshall's, in my opinion, is much harder than writing the simple program that implements it.

Learning the Sieve or Eratosthenes, an anchient and intuitive algorithm that generates prime numbers, reminded me of my first time learning about summing up numbers with for-loops in an intro Java class in high school. I felt this extreme sense of confidence and comfort with programming that began fading away after my first college lab assignment in C. The <span style="color:#1abc9c">SOE</span> just clicks in a way not many <em>"advanced"</em> concepts do in CS. (Yes I’m abbreviating Sieve of Eratosthenes to save 21 characters you're welcome). 

<h2 id="heading2">Naive Algorithm to Test for Primes</h2>
Testing for a prime number is tricky; here's a simple slow method to start with: 

<pre><strong>Given the number x if any prime integer from 2 to sqaureroot(X) evenly divides n it's NOT prime.</strong></pre>

This is reallllly slow. If your number is massive this method gets even worse. Regardless it's probably a great intro to programming homework problem (hint hint CS101 profs) but in the business of primes we'd need something faster. Enter <span style="color:#1abc9c">SOE</span>... 

 
<h2 id="heading2">The Sieve</h2> 

The Sieve of Eratosthenes was developed by a Greek mathematicions somewhere around 240ish BC. 


I was actually taught the sieve in a course preparing students for programming competitions where we were learning methods of Prime number generation. My love for prime numbers is non-existent, but for some odd reason I found this singular algorithm infuriatingly beautiful. Sure, it doesn't have the overwhelming existential impacts of max flows and single shortest paths but something about the simple and intuitive nature of the <span style="color:#1abc9c">SOE</span>  differentiated it from the likes of every other algorithm in this class. I found myself revisiting the algorithm two weeks later in a parallel computing course attempting to translate my java to c code and running it through OpenMP for a lab.  

<hr />

<h2 id="heading2">The Acutal Algorithm</h2> 

The goal is to create a list of prime numbers that we can reference at constant time, ideally we can generate this list more quickly than the naïve approach 

Here's the algorithm: 

<ol>
<li>Generate a list of integers from 2 to some limit (for our purposes let's use 21)</li>
<pre><strong>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21</strong></pre>
<li>Since the first number of this list is 2, cross out every <em>2nd</em> number on the list after 2</li>
<pre><strong>2 3 <del>4</del> 5 <del>6</del> 7 <del>8</del> 9 <del>10</del> 11 <del>12</del> 13 <del>14</del> 15 <del>16</del> 17 <del>18</del> 19 <del>20</del> 21 </strong></pre>
<li>The next number is 3 so same idea, cross out ever <em>3rd</em> number on the list after 3</li>
<pre><strong>2 3 <del>4</del> 5 <del>6</del> 7 <del>8</del> <del>9</del> <del>10</del> 11 <del>12</del> 13 <del>14</del> <del>15</del> <del>16</del> 17 <del>18</del> 19 <del>20</del> <del>21</del></strong></pre>
<li>5 is the next number, however no multiples of 5 remain to be crossed out</li>
<li>We continue until there are no more numbers left to count off of and there's your list of primes (which is right now) and what we are left with is our list of primes</li>
<pre><strong>2 3 5 7 11 13 17 19</strong></pre>
</ol> 

<h2 id="heading2"> Simple right?</h2>

<strong><span style="color:#EB298C">YES!</span></strong> I think that's the beauty of it. I'd like to take this simple concept and see how far I can attempt to speed it up and benchmark it.
 

Watch this GIF that illustrates the algorithm perfectly (thanks Wikipedia) reload the page if it's finished.

<p><img alt="Sieve of Eratosthenes animation" src="https://upload.wikimedia.org/wikipedia/commons/0/0b/Sieve_of_Eratosthenes_animation.svg"/></p>

And that's the <span style="color:#1abc9c">SOE</span>. There are faster variations (see Euler's Sieve and this [paper](http://www.cs.utexas.edu/users/misra/scannedPdf.dir/linearSieve.pdf)). <em>But this algorithm is relatively easy to explain and understand.</em> 

<!---
<hr/>
<h2 id="heading2"> Here's the sieve in Java: </h2>



<h2 id="heading2">Here's the implementation in C: </h2> 

 

Parallelization? Is this a word? Making to parallels codes: 

This is not a guide to parallelizing code, If you're interested in learning I can point you to my amazing college professor for the course I took; his course material is all in comic sans on a jarring neon background, but his lectures were fantastic.
 

<h2 id="heading2">This is probably not a great CUDA task:</h2> 

-Running the sieve with OpenMP or MPI makes a lot of sense, I do think that achieving a speedup from GPU parallelizations might be difficult given memory restrictions in cuda but I decided to investigate.

-Runnign the sieve on CUDA probably doesn't make direct sense given the speedup that induced by GPU parallelization. But I have a brand new Water Cooled Psacal Titan X from Nvidia and it would be a crime to leave all those CUDA cores to rendering GTA V at 4K Resolution and training baby predictive models for my fantasy football league… So I'm going to try to find a way to utilize the GPU cuda cores to generate primes.
-->

